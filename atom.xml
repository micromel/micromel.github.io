<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello, Mel</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-28T17:44:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIPS 02 Data Representation</title>
    <link href="http://yoursite.com/2016/03/28/MIPS-02-Data-Representation/"/>
    <id>http://yoursite.com/2016/03/28/MIPS-02-Data-Representation/</id>
    <published>2016-03-28T17:42:30.000Z</published>
    <updated>2016-03-28T17:44:02.000Z</updated>
    
    <content type="html">&lt;p&gt;A number can be positive, negative, or zero. By convention, we use a minus sign to distinguish a negative number from a positive number. However, a computer reads and stores all types of information as fixed bits of binary numbers, which are just sequences of 1s and 0s. How could a computer represent a negative number by using binary numbers was a problem in early days. Since then, various methods have been designed to encrypt and read negative numbers.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Before you move on, it is important to know &lt;a href=&quot;http://www.wikihow.com/Convert-from-Decimal-to-Binary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;how to convert from decimal to binary&lt;/a&gt; and &lt;a href=&quot;http://www.wikihow.com/Convert-Binary-to-Hexadecimal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;how to convert from binary to hexadecimal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Unsigned-Integer&quot;&gt;&lt;a href=&quot;#Unsigned-Integer&quot; class=&quot;headerlink&quot; title=&quot;Unsigned Integer&quot;&gt;&lt;/a&gt;Unsigned Integer&lt;/h3&gt;&lt;p&gt;Unsigned integer encoding does not have the representation of negative numbers, that is to say, an unsigned integer is either positive or zero. An n-bit unsigned integer ranges from 0 to $2^n-1$, thus a 4-bit unsigned integer would have values between 0 - 15.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Examples of some unsigned integers (&lt;b&gt;2 bytes&lt;/b&gt;). &lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;$0_{10}$&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;$10_{10}$&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;$15_{10}$&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;$255_{10}$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00000000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00001010_2$&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00001111_2$&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$11111111_2$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt; Examples of addition/subtraction (&lt;b&gt;1 byte&lt;/b&gt;). &lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Addition #1&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Addition #2&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Addition #3&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$0011_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($3_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($8_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($8_{10}$)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;+ $0101_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($5_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;+ $0000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($0_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;+ $1010_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($10_{10}$)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;= $1000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($8_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;= $1000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($8_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;= $0010_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($18_{10}$)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;i&gt;&lt;a href=&quot;http://www.wikihow.com/Add-Binary-Numbers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;click here&lt;/a&gt; if you don&amp;#x2019;t know binary addition&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;You may have noticed that the first bit of the result of Addition #3 is truncated , in which the correct answer should be $10010_2$. The magnitude of registers in this example is 1 byte (4 bits). &lt;span class=&quot;highlight-text primary&quot;&gt;Overflow&lt;/span&gt; would occur as the result of producing a number, like $10010_2$, that exceeds the limitation of a given register&amp;apos;s capacity to store.  

&lt;/p&gt;&lt;h3&gt;Signed Integer&lt;/h3&gt;
To store a negative number, signed integer uses &lt;span class=&quot;highlight-text primary&quot;&gt;the most significant bit&lt;/span&gt; (the leftmost bit: &lt;span class=&quot;highlight-text primary&quot;&gt;1&lt;/span&gt;0000000) as an indication of &amp;quot;+&amp;quot; sign or &amp;quot;-&amp;quot; sign, in which 0 represents positive and 1 represent negative. We could imagine that a 32-bit unsigned integer would have 32 bits to store data whereas a 32-bit signed integer would only have 31 bits available because the first bit is denoted as a sign bit. However, with the indication of sign, the leading 0/1 is useful not only when doing arithmetic calculation but also when performing MIPS instructions such as SLT (set on less than).    
&lt;br&gt;&lt;br&gt;
&lt;ul style=&quot;list-style-type:disc&quot;&gt;
&lt;li&gt;&lt;b&gt;Signed Magnitude&lt;/b&gt;&lt;/li&gt;

Signed magnitude is probably the easiest way to represent a negative number in binary system. With the indication of plus-minus by the sign bit, we can simply treat the remaining bits as if they represented an unsigned integer. For example: a 4 bits register would store positive 3 as &lt;span class=&quot;highlight-text orange&quot;&gt;0&lt;/span&gt;011 and negative 3 as &lt;span class=&quot;highlight-text orange&quot;&gt;1&lt;/span&gt;011. Also, we should notice that there are indeed 2 representations of 0, where the positive 0 is &lt;span class=&quot;highlight-text orange&quot;&gt;0&lt;/span&gt;000 and the negative 0 is &lt;span class=&quot;highlight-text orange&quot;&gt;1&lt;/span&gt;000.  
&lt;br&gt;&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; since the most significant bit is used to denote the plus-minus, a 4-bit register only has the remaining 3 bits to represent the actual data, which means that the largest and the lowest number a 4-bit register can address is &lt;span class=&quot;highlight-text orange&quot;&gt;0&lt;/span&gt;111 (${7_1}_0$) and &lt;span class=&quot;highlight-text orange&quot;&gt;1&lt;/span&gt;111 (${-7_1}_0$), respectively. &lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;i&gt;Examples of positive &amp;amp; negative numbers (&lt;b&gt;2 bytes&lt;/b&gt;)&lt;/i&gt;&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:right&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00000000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($+0_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00001111_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($15_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$00000011_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($3_{10}$)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$10000000_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($-0_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$10001111_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($-15_{10}$)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$10000011_2$&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;($-3_{10}$)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;i&gt;To be continued&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;A number can be positive, negative, or zero. By convention, we use a minus sign to distinguish a negative number from a positive number. However, a computer reads and stores all types of information as fixed bits of binary numbers, which are just sequences of 1s and 0s. How could a computer represent a negative number by using binary numbers was a problem in early days. Since then, various methods have been designed to encrypt and read negative numbers.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MIPS" scheme="http://yoursite.com/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>MIPS-01 Overview</title>
    <link href="http://yoursite.com/2016/03/12/MIPS-01%20Overview/"/>
    <id>http://yoursite.com/2016/03/12/MIPS-01 Overview/</id>
    <published>2016-03-12T15:21:31.000Z</published>
    <updated>2016-03-25T03:32:25.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;What-is-Assembly-Language&quot;&gt;&lt;a href=&quot;#What-is-Assembly-Language&quot; class=&quot;headerlink&quot; title=&quot;What is Assembly Language?&quot;&gt;&lt;/a&gt;What is Assembly Language?&lt;/h4&gt;&lt;p&gt;Assembly language is a low-level language that lacks conveniences of methods, variables, arrays, and other abstract concepts. It is used to write programs that deal with CPU directly, which means that the instructions implemented are totally dependent on the type of processor. Nevertheless, assembly language is worth learning for every programmer who is interested in computer architecture.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;What-is-MIPS&quot;&gt;&lt;a href=&quot;#What-is-MIPS&quot; class=&quot;headerlink&quot; title=&quot;What is MIPS?&quot;&gt;&lt;/a&gt;What is MIPS?&lt;/h4&gt;&lt;p&gt;MIPS is an assembly language with extended instructions to make it more programmer-friendly. &lt;/p&gt;
&lt;h4 id=&quot;Data-Representation-in-MIPS&quot;&gt;&lt;a href=&quot;#Data-Representation-in-MIPS&quot; class=&quot;headerlink&quot; title=&quot;Data Representation in MIPS&quot;&gt;&lt;/a&gt;Data Representation in MIPS&lt;/h4&gt;&lt;p&gt;In order to write MIPS programs, first we must understand how data is stored and computation is performed in the most basic level. &lt;/p&gt;
&lt;p&gt;The lowest unit of data is a &lt;i&gt;bit&lt;/i&gt;. A bit is a binary value representing either &lt;i&gt;1&lt;/i&gt; or &lt;i&gt;0&lt;/i&gt;. Depending on the context, a binary value can be interpreted as &amp;#x201C;positive&amp;#x201D; and &amp;#x201C;negative&amp;#x201D;, &amp;#x201C;true&amp;#x201D; and &amp;#x201C;false&amp;#x201D;, or &amp;#x201C;on&amp;#x201D; and &amp;#x201C;off&amp;#x201D;; basically, it represents 2 possible states of the result of a computation. &lt;/p&gt;
&lt;p&gt;A &lt;i&gt;byte&lt;/i&gt; consists of 8 bits. In MIPS, 1 byte represents 1 &lt;a href=&quot;http://www.asciitable.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ASCII&lt;/a&gt; character. Since a string is basically an array of characters, the string &lt;span class=&quot;highlight-text primary&quot;&gt;Hello, World!&lt;/span&gt; containing 13 ASCII characters (including &amp;#x201C;,&amp;#x201D;, &amp;#x201C;[space]&amp;#x201D;, and &amp;#x201C;!&amp;#x201D;) will take up 13 bytes in memory. &lt;/p&gt;
&lt;p&gt;A &lt;i&gt;word&lt;/i&gt; refers to the largest addressable unit of a register. Therefore, the length of a word depends on the number of bits that the processor is able to handle in one operation. A word would be 32 bits long on a 32-bit processor, whereas a word would be 64 bits long on a 64-bit processor. In MIPS, the data type that occupies a whole word is number. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; This table is based on a 32-bit processor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Number of Bit(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bit&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;word&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;What-is-Assembly-Language&quot;&gt;&lt;a href=&quot;#What-is-Assembly-Language&quot; class=&quot;headerlink&quot; title=&quot;What is Assembly Language?&quot;&gt;&lt;/a&gt;What is Assembly Language?&lt;/h4&gt;&lt;p&gt;Assembly language is a low-level language that lacks conveniences of methods, variables, arrays, and other abstract concepts. It is used to write programs that deal with CPU directly, which means that the instructions implemented are totally dependent on the type of processor. Nevertheless, assembly language is worth learning for every programmer who is interested in computer architecture.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MIPS" scheme="http://yoursite.com/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/11/hello-world/"/>
    <id>http://yoursite.com/2016/03/11/hello-world/</id>
    <published>2016-03-12T01:11:54.000Z</published>
    <updated>2016-03-16T02:32:12.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h3&gt;&lt;h4 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h3&gt;&lt;h4 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
